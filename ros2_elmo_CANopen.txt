#!/usr/bin/env python3

import time
import rclpy
from rclpy.node import Node
import canopen
from example_interfaces.msg import Int16

'''Initialize Parameters'''

class elmo_ros2(Node):

    def __init__(self):
        #PART 1###################################################################################################################################
        '''ROS2 Node'''
        super().__init__('elmo_node')
            


        #Declare parameters
        self.declare_parameter('Number_motors',1)   #Param1 default #############
        self.declare_parameter('Bitrate',500000)    #Param3 default #############
        self.declare_parameter('Channel','can0')    #Param4 default #############
        self.declare_parameter('Mode', 4)           #Param5 default #############  4 for torque
        self.declare_parameter('Init_vel_tor',0)    #Param6 default #############
        self.declare_parameter('Path','/home/dfki.uni-bremen.de/jgonzalez/Downloads/CANedsGoldV005_0.eds')      #Param7 default ############
        self.declare_parameter('Node_id_m1',127)    #Param8 default #############
        self.declare_parameter('Node_id_m2',128)    #Param9 default #############
        self.declare_parameter('Node_id_m3',129)    #Param10 default #############
        self.declare_parameter('Node_id_m4',130)    #Param11 default #############



        #Get parameters
        n_motors = self.get_parameter('Number_motors').value
        self.n_motors = n_motors
        bitr = self.get_parameter('Bitrate').value
        self.bitr = bitr
        chnl = self.get_parameter('Channel').value
        self.chnl = chnl
        mode = self.get_parameter('Mode').value
        self.mode = mode
        init_vel_tor = self.get_parameter('Init_vel_tor').value
        self.init_vel_tor = init_vel_tor
        path = self.get_parameter('Path').value
        self.path = path



        #Get Nodes ID (Cases)
        if n_motors == 1:
            node_id1 = self.get_parameter('Node_id_m1').value
            self.node_id1 = node_id1
        elif n_motors == 2:
            node_id1 = self.get_parameter('Node_id_m1').value
            self.node_id1 = node_id1
            node_id2 = self.get_parameter('Node_id_m2').value
            self.node_id2 = node_id2
        elif self.n_motors == 3:
            node_id1 = self.get_parameter('Node_id_m1').value
            self.node_id1 = node_id1
            node_id2 = self.get_parameter('Node_id_m2').value
            self.node_id2 = node_id2
            node_id3 = self.get_parameter('Node_id_m3').value
            self.node_id3 = node_id3
        elif self.n_motors == 4:
            node_id1 = self.get_parameter('Node_id_m1').value
            self.node_id1 = node_id1
            node_id2 = self.get_parameter('Node_id_m2').value
            self.node_id2 = node_id2
            node_id3 = self.get_parameter('Node_id_m3').value
            self.node_id3 = node_id3
            node_id4 = self.get_parameter('Node_id_m4').value
            self.node_id4 = node_id4




        #PART 2###################################################################################################################################
        '''CANopen'''
        # CANopen Network
        network = canopen.Network()
        self.network = network
        time.sleep(0.1)
        network.connect(bustype ='socketcan', channel=chnl, bitrate=bitr)
        time.sleep(0.1)
        network.sync.start(0.01)
        canopen.network.MessageListener(network) #Listens for messages on CAN bus and feeds them to a Network instance.
        network.listeners
        print('Network Values: ',network.values())



        #Cases for No of Motors
        if n_motors == 1:
            node1_canopen = canopen.RemoteNode(node_id1,path)
            self.node1_canopen = node1_canopen
        elif n_motors == 2:
            node1_canopen = canopen.RemoteNode(node_id1,path)
            self.node1_canopen = node1_canopen
            node2_canopen = canopen.RemoteNode(node_id2,path)
            self.node2_canopen = node2_canopen
        elif n_motors == 3:
            node1_canopen = canopen.RemoteNode(node_id1,path)
            self.node1_canopen = node1_canopen
            node2_canopen = canopen.RemoteNode(node_id2,path)
            self.node2_canopen = node2_canopen
            node3_canopen = canopen.RemoteNode(node_id3,path)
            self.node3_canopen = node3_canopen
        elif n_motors == 4:
            node1_canopen = canopen.RemoteNode(node_id1,path)
            self.node1_canopen = node1_canopen
            node2_canopen = canopen.RemoteNode(node_id2,path)
            self.node2_canopen = node2_canopen
            node3_canopen = canopen.RemoteNode(node_id3,path)
            self.node3_canopen = node3_canopen
            node4_canopen = canopen.RemoteNode(node_id4,path)
            self.node4_canopen = node4_canopen
    


        #Add CANopen nodes to the Network
        if n_motors == 1:
            m1 = network.add_node(node1_canopen)
            self.m1 = m1
        elif n_motors == 2:
            m1 = network.add_node(node1_canopen)
            self.m1 = m1
            m2 = network.add_node(node2_canopen)
            self.m2 = m2
        elif n_motors == 3:
            m1 = network.add_node(node1_canopen)
            self.m1 = m1
            m2 = network.add_node(node2_canopen)
            self.m2 = m2
            m3 = network.add_node(node3_canopen)
            self.m3 = m3
        elif n_motors == 4:
            m1 = network.add_node(node1_canopen)
            self.m1 = m1
            m2 = network.add_node(node2_canopen)
            self.m2 = m2
            m3 = network.add_node(node3_canopen)
            self.m3 = m3
            m4 = network.add_node(node4_canopen)
            self.m4 = m4



        #Confirm nodes are found
        for node_id in network.scanner.nodes:
            print('Found Node %d!' % node_id)



        #Send initial machine state (Cases)
        if n_motors == 1:
            m1.nmt.state = 'RESET COMMUNICATION'
            time.sleep(0.05)
            m1.nmt.state = 'PRE-OPERATIONAL'
            time.sleep(0.05)
            m1.nmt.state = 'OPERATIONAL'
            time.sleep(0.05)
        elif n_motors == 2:
            m1.nmt.state = 'RESET COMMUNICATION'
            m2.nmt.state = 'RESET COMMUNICATION'
            time.sleep(0.05)
            m1.nmt.state = 'PRE-OPERATIONAL'
            m2.nmt.state = 'PRE-OPERATIONAL'
            time.sleep(0.05)
            m1.nmt.state = 'OPERATIONAL'
            m2.nmt.state = 'OPERATIONAL'
            time.sleep(0.05)
        elif n_motors == 3:
            m1.nmt.state = 'RESET COMMUNICATION'
            m2.nmt.state = 'RESET COMMUNICATION'
            m3.nmt.state = 'RESET COMMUNICATION'
            time.sleep(0.05)
            m1.nmt.state = 'PRE-OPERATIONAL'
            m2.nmt.state = 'PRE-OPERATIONAL'
            m3.nmt.state = 'PRE-OPERATIONAL'
            time.sleep(0.05)
            m1.nmt.state = 'OPERATIONAL'
            m2.nmt.state = 'OPERATIONAL'
            m3.nmt.state = 'OPERATIONAL'
            time.sleep(0.05)
        elif n_motors == 4:
            m1.nmt.state = 'RESET COMMUNICATION'
            m2.nmt.state = 'RESET COMMUNICATION'
            m3.nmt.state = 'RESET COMMUNICATION'
            m4.nmt.state = 'RESET COMMUNICATION'
            time.sleep(0.05)
            m1.nmt.state = 'PRE-OPERATIONAL'
            m2.nmt.state = 'PRE-OPERATIONAL'
            m3.nmt.state = 'PRE-OPERATIONAL'
            m4.nmt.state = 'PRE-OPERATIONAL'
            time.sleep(0.05)
            m1.nmt.state = 'OPERATIONAL'
            m2.nmt.state = 'OPERATIONAL'
            m3.nmt.state = 'OPERATIONAL'
            m4.nmt.state = 'OPERATIONAL'



        #Variables from Object Dictionary (Cases)
        if n_motors == 1:
            '''Status Word'''
            status_word_1 = m1.sdo[0x6041]             #READ ONLY   
            self.status_word_1 = status_word_1
            '''Control Word'''
            control_word_1 = m1.sdo[0x6040]            #WRITE ONLY
            self.control_word_1 = control_word_1
            '''Modes Of Operation'''
            modes_of_operation_1 = m1.sdo[0x6060]      #WRITE ONLY
            self.modes_of_operation_1 = modes_of_operation_1
            '''Target Velocity'''
            target_vel_1 = m1.sdo[0x60FF]              #WRITE ONLY      ****Target Velocity // Velocity Profile
            self.target_vel_1 = target_vel_1
            '''Velocity Value'''
            vel_value_1 = m1.sdo[0x606C]               #READ ONLY       ****Reads Velocity   // Velocity Profile
            self.vel_value_1 = vel_value_1
            '''Max. Operational Current mA'''
            max_current_1 = m1.sdo[0x6073]             #WRITE ONLY      ****Sets Max Operational Current // Velocity Profile, Torque Profile
            self.max_current_1 = max_current_1         
            '''Motor Rated Current mA'''
            rated_current_1 = m1.sdo[0x6075]            #WRITE ONLY      ****Sets Motor Rated Current // Torque Profile
            self.rated_current_1 = rated_current_1
            '''Motor Current Actual Value mA'''
            current_value_1 = m1.sdo[0x6078]            #READ ONLY       ****Reads Current   // Torque Profile
            self.current_value_1 = current_value_1
            '''Target Torque mA'''
            target_current_1 = m1.sdo[0x6071]            #WRITE ONLY       ****Target Torque   // Torque Profile
            self.target_current_1 = target_current_1     # 1 - 1000 (1-100%)                
            # Formula  [0x6071]
            '''If a torque that is relative to current of 2 Amps is needed, and object 0x6075 (Motor rated current) is 3200mA,
            Then:
            [0x6071] = 2000mA x 1000 / 3200 mA = 625 
            this means 62.5 % of motor rate current
            '''
            sensor_sel_code_1 = m1.sdo[0x606A]         #WRITE ONLY
            self.sensor_sel_code_1 = sensor_sel_code_1
        elif n_motors == 2:
            status_word_1 = m1.sdo[0x6041]             #READ ONLY
            status_word_2 = m2.sdo[0x6041]
            self.status_word_1 = status_word_1
            self.status_word_2 = status_word_2

            control_word_1 = m1.sdo[0x6040]            #WRITE ONLY
            control_word_2 = m2.sdo[0x6040]
            self.control_word_1 = control_word_1
            self.control_word_2 = control_word_2

            modes_of_operation_1 = m1.sdo[0x6060]      #WRITE ONLY
            modes_of_operation_2 = m2.sdo[0x6060]
            self.modes_of_operation_1 = modes_of_operation_1
            self.modes_of_operation_2 = modes_of_operation_2

            target_vel_1 = m1.sdo[0x60FF]              #WRITE ONLY  
            target_vel_2 = m2.sdo[0x60FF]
            self.target_vel_1 = target_vel_1
            self.target_vel_2 = target_vel_2

            vel_value_1 = m1.sdo[0x606C]               #READ ONLY
            vel_value_2 = m2.sdo[0x606C]
            self.vel_value_1 = vel_value_1
            self.vel_value_2 = vel_value_2

            max_current_1 = m1.sdo[0x6073]             #WRITE ONLY
            max_current_2 = m2.sdo[0x6073]
            self.max_current_1 = max_current_1
            self.max_current_2 = max_current_2

            rated_current_1 = m1.sdo[0x6075]            #WRITE ONLY      
            rated_current_2 = m2.sdo[0x6075]
            self.rated_current_1 = rated_current_1
            self.rated_current_2 = rated_current_2
            
            current_value_1 = m1.sdo[0x6078]            #READ ONLY       
            current_value_2 = m2.sdo[0x6078]
            self.current_value_1 = current_value_1
            self.current_value_2 = current_value_2
            
            target_current_1 = m1.sdo[0x6071]            #WRITE ONLY       
            target_current_2 = m2.sdo[0x6071]
            self.target_current_1 = target_current_1
            self.target_current_2 = target_current_2

            sensor_sel_code_1 = m1.sdo[0x606A]         #WRITE ONLY
            sensor_sel_code_2 = m2.sdo[0x606A]
            self.sensor_sel_code_1 = sensor_sel_code_1
            self.sensor_sel_code_2 = sensor_sel_code_2
        elif n_motors == 3:
            status_word_1 = m1.sdo[0x6041]             #READ ONLY
            status_word_2 = m2.sdo[0x6041]
            status_word_3 = m3.sdo[0x6041]
            self.status_word_1 = status_word_1
            self.status_word_2 = status_word_2
            self.status_word_3 = status_word_3

            control_word_1 = m1.sdo[0x6040]            #WRITE ONLY
            control_word_2 = m2.sdo[0x6040]
            control_word_3 = m3.sdo[0x6040]
            self.control_word_1 = control_word_1
            self.control_word_2 = control_word_2
            self.control_word_3 = control_word_3

            modes_of_operation_1 = m1.sdo[0x6060]      #WRITE ONLY
            modes_of_operation_2 = m2.sdo[0x6060]
            modes_of_operation_3 = m3.sdo[0x6060]
            self.modes_of_operation_1 = modes_of_operation_1
            self.modes_of_operation_2 = modes_of_operation_2
            self.modes_of_operation_3 = modes_of_operation_3

            target_vel_1 = m1.sdo[0x60FF]              #WRITE ONLY  
            target_vel_2 = m2.sdo[0x60FF]
            target_vel_3 = m3.sdo[0x60FF]
            self.target_vel_1 = target_vel_1
            self.target_vel_2 = target_vel_2
            self.target_vel_3 = target_vel_3

            vel_value_1 = m1.sdo[0x606C]               #READ ONLY
            vel_value_2 = m2.sdo[0x606C]
            vel_value_3 = m3.sdo[0x606C]
            self.vel_value_1 = vel_value_1
            self.vel_value_2 = vel_value_2
            self.vel_value_3 = vel_value_3

            max_current_1 = m1.sdo[0x6073]             #WRITE ONLY
            max_current_2 = m2.sdo[0x6073]
            max_current_3 = m3.sdo[0x6073]
            self.max_current_1 = max_current_1
            self.max_current_2 = max_current_2
            self.max_current_3 = max_current_3

            rated_current_1 = m1.sdo[0x6075]            #WRITE ONLY      
            rated_current_2 = m2.sdo[0x6075]
            rated_current_3 = m3.sdo[0x6075]
            self.rated_current_1 = rated_current_1
            self.rated_current_2 = rated_current_2
            self.rated_current_3 = rated_current_3
            
            current_value_1 = m1.sdo[0x6078]            #READ ONLY       
            current_value_2 = m2.sdo[0x6078]
            current_value_3 = m3.sdo[0x6078]
            self.current_value_1 = current_value_1
            self.current_value_2 = current_value_2
            self.current_value_3 = current_value_3
            
            target_current_1 = m1.sdo[0x6071]            #WRITE ONLY       
            target_current_2 = m2.sdo[0x6071]
            target_current_3 = m3.sdo[0x6071]
            self.target_current_1 = target_current_1
            self.target_current_2 = target_current_2
            self.target_current_3 = target_current_3

            sensor_sel_code_1 = m1.sdo[0x606A]         #WRITE ONLY
            sensor_sel_code_2 = m2.sdo[0x606A]
            sensor_sel_code_3 = m3.sdo[0x606A]
            self.sensor_sel_code_1 = sensor_sel_code_1
            self.sensor_sel_code_2 = sensor_sel_code_2
            self.sensor_sel_code_3 = sensor_sel_code_3
        elif n_motors == 4:
            status_word_1 = m1.sdo[0x6041]             #READ ONLY
            status_word_2 = m2.sdo[0x6041]
            status_word_3 = m3.sdo[0x6041]
            status_word_4 = m4.sdo[0x6041]
            self.status_word_1 = status_word_1
            self.status_word_2 = status_word_2
            self.status_word_3 = status_word_3
            self.status_word_4 = status_word_4

            control_word_1 = m1.sdo[0x6040]            #WRITE ONLY
            control_word_2 = m2.sdo[0x6040]
            control_word_3 = m3.sdo[0x6040]
            control_word_4 = m4.sdo[0x6040]
            self.control_word_1 = control_word_1
            self.control_word_2 = control_word_2
            self.control_word_3 = control_word_3
            self.control_word_4 = control_word_4

            modes_of_operation_1 = m1.sdo[0x6060]      #WRITE ONLY
            modes_of_operation_2 = m2.sdo[0x6060]
            modes_of_operation_3 = m3.sdo[0x6060]
            modes_of_operation_4 = m4.sdo[0x6060]
            self.modes_of_operation_1 = modes_of_operation_1
            self.modes_of_operation_2 = modes_of_operation_2
            self.modes_of_operation_3 = modes_of_operation_3
            self.modes_of_operation_4 = modes_of_operation_4

            target_vel_1 = m1.sdo[0x60FF]              #WRITE ONLY  
            target_vel_2 = m2.sdo[0x60FF]
            target_vel_3 = m3.sdo[0x60FF]
            target_vel_4 = m4.sdo[0x60FF]
            self.target_vel_1 = target_vel_1
            self.target_vel_2 = target_vel_2
            self.target_vel_3 = target_vel_3
            self.target_vel_4 = target_vel_4

            vel_value_1 = m1.sdo[0x606C]               #READ ONLY
            vel_value_2 = m2.sdo[0x606C]
            vel_value_3 = m3.sdo[0x606C]
            vel_value_4 = m4.sdo[0x606C]
            self.vel_value_1 = vel_value_1
            self.vel_value_2 = vel_value_2
            self.vel_value_3 = vel_value_3
            self.vel_value_4 = vel_value_4

            max_current_1 = m1.sdo[0x6073]             #WRITE ONLY
            max_current_2 = m2.sdo[0x6073]
            max_current_3 = m3.sdo[0x6073]
            max_current_4 = m4.sdo[0x6073]
            self.max_current_1 = max_current_1
            self.max_current_2 = max_current_2
            self.max_current_3 = max_current_3
            self.max_current_4 = max_current_4

            rated_current_1 = m1.sdo[0x6075]            #WRITE ONLY      
            rated_current_2 = m2.sdo[0x6075]
            rated_current_3 = m3.sdo[0x6075]
            rated_current_4 = m4.sdo[0x6075]
            self.rated_current_1 = rated_current_1
            self.rated_current_2 = rated_current_2
            self.rated_current_3 = rated_current_3
            self.rated_current_4 = rated_current_4
            
            current_value_1 = m1.sdo[0x6078]            #READ ONLY       
            current_value_2 = m2.sdo[0x6078]
            current_value_3 = m3.sdo[0x6078]
            current_value_4 = m4.sdo[0x6078]
            self.current_value_1 = current_value_1
            self.current_value_2 = current_value_2
            self.current_value_3 = current_value_3
            self.current_value_4 = current_value_4
            
            target_current_1 = m1.sdo[0x6071]            #WRITE ONLY       
            target_current_2 = m2.sdo[0x6071]
            target_current_3 = m3.sdo[0x6071]
            target_current_4 = m4.sdo[0x6071]
            self.target_current_1 = target_current_1
            self.target_current_2 = target_current_2
            self.target_current_3 = target_current_3
            self.target_current_4 = target_current_4

            sensor_sel_code_1 = m1.sdo[0x606A]         #WRITE ONLY
            sensor_sel_code_2 = m2.sdo[0x606A]
            sensor_sel_code_3 = m3.sdo[0x606A]
            sensor_sel_code_4 = m4.sdo[0x606A]
            self.sensor_sel_code_1 = sensor_sel_code_1
            self.sensor_sel_code_2 = sensor_sel_code_2
            self.sensor_sel_code_3 = sensor_sel_code_3
            self.sensor_sel_code_4 = sensor_sel_code_4

        
        #Sequence for enabling motion modes of operation (Cases)
        if self.n_motors == 1:
            #Enable Voltage
            control_word_1.bits[1] = 1
            time.sleep(0.05)
            print('Status word', bin(status_word_1.raw))
            time.sleep(0.05)
            #Quick Stop
            control_word_1.bits[2] = 1
            time.sleep(0.05)
            print('Status word', bin(status_word_1.raw))
            time.sleep(0.05)
            #Switch ON
            control_word_1.bits[0] = 1
            time.sleep(0.05)
            print('Status word', bin(status_word_1.raw))
            time.sleep(0.05)
            #Enable Operation
            control_word_1.bits[3] = 1
            time.sleep(0.05)
            print('Status word', bin(status_word_1.raw))
            time.sleep(0.05)
            #Fault Reset
            control_word_1.bits[7] = 1
            time.sleep(0.05)
            print('Status word', bin(status_word_1.raw))
            time.sleep(0.05)



        #Sequence for enabling motion modes of operation (Cases)
        if n_motors == 1:
            control_word_1.raw = 6           #Enable Voltage, Quick Stop
            time.sleep(0.05)
            control_word_1.raw = 7           #SwitchON
            time.sleep(0.05)
            control_word_1.raw = 15          #Operation enable
            time.sleep(0.05)


        '''CREATE CALLBACK'''
        self.create_timer(0.5,self.drive_motion)
        ''''''



    #PART 3###################################################################################################################################
    '''Cyclic Function / Callback'''

    def drive_motion(self):
        

        print('You have this number of motors: ',self.n_motors)
        print('Node id from m1: ',self.node_id1)
        print('You have this initial vel/ torq: ',self.init_vel_tor)
        time.sleep(1.0)
        


        if self.mode == 3:
            #Modes Of Operation (Cases)
            if self.n_motors ==1:
                self.modes_of_operation_1.raw = self.mode    #Velocity Profile
            self.max_current_1.raw = 2000
            self.rated_current_1.raw = 2000

            vel_tor = input('Enter target Vel/Tor: ')
            time.sleep(0.05)

            self.target_vel_1.raw = vel_tor
            time.sleep(2)
            print("Read Velocity (rpm) / Torque (mA): ", self.vel_value_1.raw)
            print('Torque Reached: ', self.status_word_1.bits[10])
            print(bin(self.status_word_1.raw))
            print(self.status_word_1.bits[3])
            

            '''Reading Safety Button Status'''
            if self.status_word_1.bits[3] == 1:
                print('Safety button Active!')

            time.sleep(0.05)

        elif self.mode == 4:
            #Modes Of Operation (Cases)
            if self.n_motors ==1:
                self.modes_of_operation_1.raw = self.mode    #Velocity Profile
            self.max_current_1.raw = 2000
            self.rated_current_1.raw = 2000

            vel_tor = input('Enter target Vel/Tor: ')
            time.sleep(0.05)

            self.target_current_1.raw = vel_tor
            time.sleep(2)
            print("Read Velocity (rpm) / Torque (mA): ", self.current_value_1.raw)
            print('Torque Reached: ', self.status_word_1.bits[10])
            print(bin(self.status_word_1.raw))
            print(self.status_word_1.bits[3])
            

            '''Reading Safety Button Status'''
            if self.status_word_1.bits[3] == 1:
                print('Safety button Active!')

            time.sleep(0.05)


        


def main (args=None):
    rclpy.init(args=args)
    node_ros2 = elmo_ros2()
    rclpy.spin(node_ros2)
    canopen.network.sync.stop()
    canopen.network.disconnect()    #Terminates CANopen Comm
    rclpy.shutdown()                #Closes ros2 Communication


if __name__=='main':
    main()

    
